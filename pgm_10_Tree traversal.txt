#include <stdio.h>
#include <stdlib.h>

// Definition for a binary tree node
struct TreeNode {
    int data;
    struct TreeNode* left;
    struct TreeNode* right;
};

// Function to create a new tree node
struct TreeNode* createNode(int value) {
    struct TreeNode* newNode = (struct TreeNode*)malloc(sizeof(struct TreeNode));
    newNode->data = value;
    newNode->left = newNode->right = NULL;
    return newNode;
}

// Function to perform Pre-Order traversal
void preOrderTraversal(struct TreeNode* root) {
    if (root == NULL) return;
    printf("%d ", root->data);              // Process current node
    preOrderTraversal(root->left);          // Recur on left subtree
    preOrderTraversal(root->right);         // Recur on right subtree
}

// Function to perform In-Order traversal
void inOrderTraversal(struct TreeNode* root) {
    if (root == NULL) return;
    inOrderTraversal(root->left);           // Recur on left subtree
    printf("%d ", root->data);              // Process current node
    inOrderTraversal(root->right);          // Recur on right subtree
}

// Function to perform Post-Order traversal
void postOrderTraversal(struct TreeNode* root) {
    if (root == NULL) return;
    postOrderTraversal(root->left);         // Recur on left subtree
    postOrderTraversal(root->right);        // Recur on right subtree
    printf("%d ", root->data);              // Process current node
}

int main() {
    // Constructing a sample binary tree
    struct TreeNode* root = createNode(1);
    root->left = createNode(2);
    root->right = createNode(3);
    root->left->left = createNode(4);
    root->left->right = createNode(5);
    root->right->left = createNode(6);
    root->right->right = createNode(7);

    // Perform tree traversals
    printf("Pre-Order Traversal: ");
    preOrderTraversal(root);
    printf("\n");

    printf("In-Order Traversal: ");
    inOrderTraversal(root);
    printf("\n");

    printf("Post-Order Traversal: ");
    postOrderTraversal(root);
    printf("\n");


    return 0;
}
