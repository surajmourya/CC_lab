#include <stdio.h>
#include <stdlib.h>
#include <string.h>

#define MAX_SIZE 100

struct Stack {
    int* arr;
    int top;
};

// Initialize stack
void initializeStack(struct Stack* st, int n) {
    st->top = -1;
    st->arr = (int*)malloc(sizeof(int) * n);
}

// Check if stack is empty
int isEmpty(struct Stack* st) {
    return st->top == -1;
}

// Push element onto stack
void push(struct Stack* st, int element) {
    st->top++;
    st->arr[st->top] = element;
}

// Pop element from stack
int pop(struct Stack* st) {
    if (!isEmpty(st)) {
        int value = st->arr[st->top];
        st->top--;
        return value;
    }
    return -1; // Return -1 to indicate an empty stack
}

// Evaluate postfix expression
int evaluatePostfix(char* expression) {
    struct Stack st;
    initializeStack(&st, strlen(expression));

    for (int i = 0; expression[i] != '\0'; ++i) {
        char ch = expression[i];
        if (ch >= '0' && ch <= '9') {
            push(&st, ch - '0');
        } else {
            int operand2 = pop(&st);
            int operand1 = pop(&st);
            switch (ch) {
                case '+':
                    push(&st, operand1 + operand2);
                    break;
                case '-':
                    push(&st, operand1 - operand2);
                    break;
                case '*':
                    push(&st, operand1 * operand2);
                    break;
                case '/':
                    push(&st, operand1 / operand2);
                    break;
            }
        }
    }

    return pop(&st);
}

int main() {
    struct Stack st;
    char postfixExpression[MAX_SIZE];

    initializeStack(&st, MAX_SIZE);

    printf("Enter a postfix expression: ");
    scanf("%s", postfixExpression);

    int result = evaluatePostfix(postfixExpression);
    printf("Result: %d\n", result);

    free(st.arr); // Free allocated memory

    return 0;
}
